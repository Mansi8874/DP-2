public class Solution {

	public static int editDistance(String s, String t) {
		//Your code goes here
        
        //dp
        int m=s.length();
        int n=t.length();
        int storage[][]=new int[s.length()+1][t.length()+1];
        for(int i=0;i<=m;i++){
            storage[i][0]=i;
        }
        for(int j=0;j<=n;j++){
            storage[0][j]=j;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(s.charAt(m-i)==t.charAt(n-j)){
                    storage[i][j]=storage[i-1][j-1];
                }else{
                    storage[i][j]=1+Math.min(storage[i-1][j],Math.min(storage[i][j-1],storage[i-1][j-1]));
                }
            }
        }
        return storage[m][n];
        
    }
        
        //memoraize
        
//         int storage[][]=new int[s.length()+1][t.length()+1];
//         for(int i=0;i<s.length()+1;i++){
//             for(int j=0;j<t.length()+1;j++){
//                 storage[i][j]=-1;
//             }
//         }
//         return editDistance(s,t,storage);
//     }
//     public static int editDistance(String s,String t,int[][] storage){
//         int m=s.length();
//         int n=t.length();
//         if(m==0){
//             storage[m][n]=t.length();
//             return storage[m][n];
//         }
//         if(n==0){
//             storage[m][n]=s.length();
//             return storage[m][n];
//         }
//         if(storage[m][n]!=-1){
//             return storage[m][n];
//         }
//         if(s.charAt(0)==t.charAt(0)){
//             storage[m][n]= editDistance(s.substring(1),t.substring(1),storage);
//         }else{
//             int op1=editDistance(s,t.substring(1),storage);
//             int op2=editDistance(s.substring(1),t,storage);
//             int op3=editDistance(s.substring(1),t.substring(1),storage);
//             storage[m][n]= 1+Math.min(op1,Math.min(op2,op3));
//             return storage[m][n];
//         }

//     }

}
