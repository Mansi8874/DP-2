public class Solution {

	public static int minCostPath(int[][] input) {
		//Your code goes here
        
        
        
        
//         return minCostPath(input,0,0);
// 	}
//     public static int minCostPath(int[][] input,int i,int j){

//         int n=input.length;
//         int m=input[0].length;
//         if(i>=n || j>=m){
//             return Integer.MAX_VALUE;
//         }
//         if(i==n-1 && j==m-1){
 
//             return input[i][j];
//         }
//         int downward=minCostPath(input,i+1,j);
//         int rightPath=minCostPath(input,i,j+1);
//         int diagonal=minCostPath(input,i+1,j+1);
//         return input[i][j]+Math.min(downward,Math.min(rightPath,diagonal));
     
        
        
        
        
//         int m=input.length;
//         int n=input[0].length;
//         int [][]storage= new int[m][n];
//         for(int i=0;i<m;i++){
//             for(int j=0;j<n;j++){
//                 storage[i][j]=-1;
//             }
//         }
//         return minCostPath(input,0,0,storage);
//     }
    
//     public static int minCostPath(int[][] input,int i,int j,int [][] storage){
//         int m=input.length;
//         int n=input[0].length;
//         if(i>=m || j>=n){
//             return Integer.MAX_VALUE;
//         }
//         if(i==m-1 && j==n-1){
//             storage[m-1][n-1]=input[i][j];
//             return storage[i][j];
//         }
//         if(storage[i][j]!=-1){
//             return storage[i][j];
//         }
//         int downward=minCostPath(input,i+1,j,storage);
//         int rightPath=minCostPath(input,i,j+1,storage);
//         int diagonal=minCostPath(input,i+1,j+1,storage);

//         storage[i][j]=input[i][j]+Math.min(downward,Math.min(rightPath,diagonal));
//         return storage[i][j];
//     }
    
    
    
        int m=input.length;
        int n=input[0].length;
        int [][]storage= new int[m][n];
        //storage[0][0]=input[0][0];
        storage[m-1][n-1]=input[m-1][n-1];
        for(int i=0;i<m-1;i++){
            for(int j=0;j<n-1;j++){
                int downward=minCostPath(input,i+1,j,storage);
                int rightPath=minCostPath(input,i,j+1,storage);
                int diagonal=minCostPath(input,i+1,j+1,storage);
                storage[i][j]=input[i][j]+Math.min(downward,Math.min(rightPath,diagonal));
            }
        }
    
}
