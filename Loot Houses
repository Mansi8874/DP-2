public class Solution {

	public static int maxMoneyLooted(int[] houses) {
		//Your code goes here
        
        //DP
        
	if (houses.length==0) return 0;
	int[] dp = new int[houses.length];
	dp[0] = houses[0];
	dp[1] = Math.max(houses[0], houses[1]);
	for (int i = 2; i < houses.length; i++) {
	dp[i]  =Math.max(dp[i-1],dp[i-2]+houses[i]);
	}
	return dp[houses.length-1];
	}
        
        //RECURSION
        
//         return maxMoney(houses,0,0);

//      }
//     public static int maxMoney(int [] houses,int i,int money){
//         if(i>=houses.length){
//             return money;
//         }
//         int op1=maxMoney(houses,i+1,money);
//         int op2=maxMoney(houses,i+2,money+houses[i]);
//         return Math.max(op1,op2);
//     }
        
        //MEMORIZABLE
        
        
//         if(houses.length==0){
//             return 0;
//         }
//         int storage[]= new int[houses.length];
//         for(int i=0;i<storage.length;i++){
//             storage[i]=-1;
//         }
//         return maxMoney(houses,storage,houses.length-1);
//     }
    
//     public static int maxMoney(int[] houses,int[] storage,int i){
//         if(i<=0){
//             storage[i]=houses[i];
//             return storage[i];
//         }
//         if(i==1){
//             storage[i]=Math.max(houses[i-1],houses[i]);
//             return storage[i];
//         }
//         if(storage[i]!=-1){
//             return storage[i];
//         }
//         int op1=maxMoney(houses,storage,i-1);
//         int op2=maxMoney(houses,storage,i-2);
//         storage[i]=Math.max(op1,op2+houses[i]);
//         return storage[i];
// 	}

}
